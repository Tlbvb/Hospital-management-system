// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admin.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO "Admin" (
fullname
) VALUES (
  $1
)
RETURNING id, fullname, created_at
`

func (q *Queries) CreateAdmin(ctx context.Context, fullname pgtype.Text) (Admin, error) {
	row := q.db.QueryRow(ctx, createAdmin, fullname)
	var i Admin
	err := row.Scan(&i.ID, &i.Fullname, &i.CreatedAt)
	return i, err
}

const getAdminById = `-- name: GetAdminById :one
SELECT id, fullname, created_at FROM "Admin"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAdminById(ctx context.Context, id int64) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdminById, id)
	var i Admin
	err := row.Scan(&i.ID, &i.Fullname, &i.CreatedAt)
	return i, err
}

const getAdminByName = `-- name: GetAdminByName :one
SELECT id, fullname, created_at FROM "Admin"
WHERE fullname = $1 LIMIT 1
`

func (q *Queries) GetAdminByName(ctx context.Context, fullname pgtype.Text) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdminByName, fullname)
	var i Admin
	err := row.Scan(&i.ID, &i.Fullname, &i.CreatedAt)
	return i, err
}
