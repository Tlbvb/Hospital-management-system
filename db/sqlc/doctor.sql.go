// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: doctor.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDoctor = `-- name: CreateDoctor :one
INSERT INTO "Doctor" (
fullname,specialty,department_id
) VALUES (
  $1, $2,$3
)
RETURNING id, fullname, specialty, department_id, created_at
`

type CreateDoctorParams struct {
	Fullname     string      `json:"fullname"`
	Specialty    string      `json:"specialty"`
	DepartmentID pgtype.Int8 `json:"department_id"`
}

func (q *Queries) CreateDoctor(ctx context.Context, arg CreateDoctorParams) (Doctor, error) {
	row := q.db.QueryRow(ctx, createDoctor, arg.Fullname, arg.Specialty, arg.DepartmentID)
	var i Doctor
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Specialty,
		&i.DepartmentID,
		&i.CreatedAt,
	)
	return i, err
}

const getDoctorById = `-- name: GetDoctorById :one
SELECT id, fullname, specialty, department_id, created_at FROM "Doctor"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDoctorById(ctx context.Context, id int64) (Doctor, error) {
	row := q.db.QueryRow(ctx, getDoctorById, id)
	var i Doctor
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Specialty,
		&i.DepartmentID,
		&i.CreatedAt,
	)
	return i, err
}

const getDoctorByName = `-- name: GetDoctorByName :one
SELECT id, fullname, specialty, department_id, created_at FROM "Doctor"
WHERE fullname = $1 LIMIT 1
`

func (q *Queries) GetDoctorByName(ctx context.Context, fullname string) (Doctor, error) {
	row := q.db.QueryRow(ctx, getDoctorByName, fullname)
	var i Doctor
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Specialty,
		&i.DepartmentID,
		&i.CreatedAt,
	)
	return i, err
}

const getDoctorsOfDepartment = `-- name: GetDoctorsOfDepartment :many
SELECT id, fullname, specialty, department_id, created_at FROM "Doctor"
WHERE department_id = $1
`

func (q *Queries) GetDoctorsOfDepartment(ctx context.Context, departmentID pgtype.Int8) ([]Doctor, error) {
	rows, err := q.db.Query(ctx, getDoctorsOfDepartment, departmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Doctor{}
	for rows.Next() {
		var i Doctor
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Specialty,
			&i.DepartmentID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
